@use "sass:map";

@import "./svgs/circles.scss";
@import "./svgs/lines.scss";
@import "./svgs/suns.scss";
@import "./svgs/draws.scss";
@import "./svgs/arrows.scss";
@import "./variables.scss";

@function encodecolor($string) {
    @if type-of($string) == "color" {
        $hex: str-slice(ie-hex-str($string), 4);
        $string: unquote("#{$hex}");
    }

    $string: "%23" + $string;
    @return $string;
}

@mixin parent {
    overflow: visible;
    position: relative;
    display: block;
    z-index: 1;
}

@mixin gribouilli {
    background-position: center;
    content: "";
    display: inline-block;
    position: absolute;
    overflow: visible;
    background-repeat: no-repeat;
    z-index: -1;
}

@mixin spantag {
    position: relative;
    background-color: transparent;
}

@mixin grib($weight, $form, $vb) {
    background-image: url('data:image/svg+xml;utf8,<svg class="bg" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" viewBox=#{$vb}> <path  fill="none" stroke-width="#{$weight}" stroke="#{encodecolor(#000000)}" #{$form} /> </svg>');
}

@mixin drawing($weight, $form, $vb) {
    background-image: url("data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20id%3D%22a%22%20viewBox%3D#{$vb}%3E%3Cdefs%3E%3Cstyle%3E.b%7Bstroke%3A%23000000%3Bstroke-linejoin%3Around%3Bstroke-miterlimit%3A10%3Bstroke-width%3A#{$weight}%3Bfill%3Anone%7D.b%2C.c%7Bfill%3Anone%7D%3C%2Fstyle%3E%3C%2Fdefs%3E#{$form}%3C%2Fsvg%3E");
}

@mixin bord($b) {
    top: #{"-" + $b * 2 +"%"};
    left: #{"-" + $b + "%"};
    right: #{"-" + $b + "%"};
    bottom: #{"-" + $b * 2 + "%"};
}

@mixin space($b) {
    left: #{"-" + (0.5 * $b) + "%"};
    right: #{"-" + (0.5 * $b) + "%"};
    bottom: #{"-" + (1.5 * $b - (0.5 * $b)) + "px"};
    height: #{(1.5 * $b) + "px"};
}

@mixin posafter {
    right: -40px;
    top: -30px;
    width: 60px;
    height: 40px;
}

@mixin posbefore {
    left: -40px;
    top: -30px;
    width: 60px;
    height: 40px;
}

._g {
    // it's mandatory to use the class _g on each parents of thoses elements
    @include parent;

    @each $color, $color_value in $colors {
        @each $opacity, $opacity_value in $opacitys {
            .clr-#{$color}-#{$opacity} {
                &::after {
                    filter: $color_value opacity($opacity_value);
                }
            }
        }
    }

    @each $size, $size_value in $sizes {
        .mrg-circle-#{$size} {
            &::after {
                @include bord($size_value);
            }
        }
        .mrg-line-#{$size} {
            &::after {
                @include space($size_value);
            }
        }
    }

    @each $position, $position_value in $positions {
        .pos-#{$position} {
            &::after {
                @if $position_value {
                    @include posafter();
                } @else {
                    @include posbefore();
                }
            }
        }
    }

    @each $bold, $bold_value in $bolds {
        @each $circle, $circle_value in $circles {
            .circle-#{$circle}-#{$bold} {
                @include spantag;
                &::after {
                    @include gribouilli;
                    @include grib(
                        $bold_value,
                        map.get($circle_value, "t"),
                        map.get($circle_value, "vb")
                    );
                }
            }
        }

        @each $line, $line_value in $lines {
            .line-#{$line}-#{$bold} {
                @include spantag;
                &::after {
                    @include gribouilli;
                    @include grib(
                        $bold_value,
                        map.get($line_value, "t"),
                        map.get($line_value, "vb")
                    );
                }
            }
        }
    }
    @each $bold, $bold_value in $bolders {
        @each $sun, $sun_value in $suns {
            .sun-#{$sun}-#{$bold} {
                @include spantag;
                &::after {
                    @include gribouilli;
                    @include drawing(
                        $bold_value,
                        map.get($sun_value, "t"),
                        map.get($sun_value, "vb")
                    );
                }
            }
        }
        @each $draw, $draw_value in $draws {
            .draw-#{$draw}-#{$bold} {
                @include spantag;
                &::after {
                    @include gribouilli;
                    @include drawing(
                        $bold_value,
                        map.get($draw_value, "t"),
                        map.get($draw_value, "vb")
                    );
                }
            }
        }
    }
}

._gb {
    @each $color, $color_value in $colors {
        @each $opacity, $opacity_value in $opacitys {
            .clr-#{$color}-#{$opacity} {
                filter: $color_value opacity($opacity_value);
            }
        }
    }
    @each $direction, $dir_value in $directions {
        .dir-#{$direction} {
            transform: rotate($dir_value);
        }
    }
    @each $size, $size_value in $arrow_size {
        .arrow-size-#{$size} {
            height: $size_value;
            width: $size_value;
        }
    }
    @each $bold, $bold_value in $bolders {
        @each $arrow, $arrow_value in $arrows {
            .arrow-#{$arrow}-#{$bold} {
                background-size: 100% auto;
                background-position: center;
                overflow: visible;
                background-repeat: no-repeat;
                @include drawing(
                    $bold_value,
                    map.get($arrow_value, "t"),
                    map.get($arrow_value, "vb")
                );
            }
        }
    }
}

@each $color, $color_value in $colors {
    .clr-#{$color} {
        filter: $color_value;
    }
}
